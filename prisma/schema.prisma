// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Events        Events[]
    Team          Team[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Events {
    id                  String                @id @default(cuid())
    title               String                @db.VarChar(240)
    startDate           DateTime
    endDate             DateTime
    description         String                @db.VarChar(500)
    user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId              String
    //TODO: add visibility - public or private default private
    EventOrganizres     EventOrganizres[]
    EventLocations      EventLocations[]
    EventRequest        EventRequest[]
    Attende             Attende[]
    EventAttendeRequest EventAttendeRequest[]

    @@index([userId])
}

model EventLocations {
    id       String @id @default(cuid())
    city     String @db.VarChar(60)
    state    String @db.VarChar(60)
    country  String @db.VarChar(60)
    event    Events @relation(fields: [eventsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    eventsId String

    @@index([eventsId])
}

model EventOrganizres {
    id            String @id @default(cuid())
    organizerName String @db.VarChar(60)
    event         Events @relation(fields: [eventsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    eventsId      String

    @@index([eventsId])
}

model Team {
    id                String              @id @default(cuid())
    teamName          String
    user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId            String
    TeamMembers       TeamMembers[]
    TeamMemberRequest TeamMemberRequest[]

    @@index([userId])
}

model TeamMembers {
    id          String @id @default(cuid())
    memberName  String
    memberEmail String
    team        Team   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    teamId      String
    //TODO: is it requird ?  status for something like active       

    @@index([teamId])
}

model Requests {
    id                  String             @id @default(cuid())
    teamMemberRequest   TeamMemberRequest? @relation(fields: [teamMemberRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    teamMemberRequestId String?
    eventRequest        EventRequest?      @relation(fields: [eventRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    eventRequestId      String?

    @@index([teamMemberRequestId])
    @@index([eventRequestId])
}

model TeamMemberRequest {
    id               String     @id @default(cuid())
    fromMemeberEmail String
    fromMemberName   String
    team             Team       @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    teamId           String
    toMemberEmail    String
    toMemberName     String
    Requests         Requests[]

    @@index([teamId])
}

model EventRequest {
    id       String     @id @default(cuid())
    event    Events     @relation(fields: [eventsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    eventsId String
    Requests Requests[]

    @@index([eventsId])
}

// for event attendees 
model Attende {
    id       String @id @default(cuid())
    email    String
    name     String
    event    Events @relation(fields: [eventsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    eventsId String

    @@index([eventsId])
}

// event invites request
model EventAttendeRequest {
    id        String @id @default(cuid())
    toEmail   String
    toName    String
    fromEmail String
    fromName  String
    event     Events @relation(fields: [eventsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    eventsId  String

    @@index([eventsId])
}
